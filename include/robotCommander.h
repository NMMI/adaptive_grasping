#ifndef ROBOT_COMMANDER_H
#define ROBOT_COMMANDER_H

#include <mutex>
#include <Eigen/Dense>
#include <std_msgs/Float64.h>
#include <geometry_msgs/Twist.h>
#include <sensor_msgs/JointState.h>
#include "ros/ros.h"

// Action Client
#include <actionlib/client/simple_action_client.h>
#include <actionlib/client/terminal_state.h>
#include <control_msgs/FollowJointTrajectoryAction.h>


/**
* @brief This class is called by the adaptive_grasping method to close the
* hand and move the kuka in order to execute the references generated by the
* contactPreserver according to the adaptive_grasping algorithm.
* @uses joint trajectory controller for the hand
* @uses twist controller for the kuka arm (palm)
*
*/

namespace adaptive_grasping {

  class robotCommander {

  public:

    /** CONSTRUCTOR
    * @brief Default constructor for robotCommander
    *
    * @param hand_topic_
    *   the topic for commanding the hand
    * @param arm_topic_
    *   the topic for commanding the arm
    * @return null
    */
    robotCommander(std::string hand_topic_, std::string arm_topic_,
      std::vector<std::string> joint_names_vec_);

    /** DESTRUCTOR
    * @brief Default destructor for robotCommander
    *
    * @param null
    * @return null
    */
    ~robotCommander();

    /** SETREFERENCES
    * @brief Public function to set the twist references of palm and the speed of hand joints
    *
    * @param hand_ref_
    *   the vector containing the hand joints' speeds
    * @param palm_ref_ (must be 6d)
    *   the vector containing the reference twist for the palm
    * @return null
    */
    void setReferences(Eigen::VectorXd hand_ref_, Eigen::VectorXd palm_ref_);

    /** COMMANDROBOT
    * @brief Public function to move the hand and/or arm (if twist = 0, no arm)
    * Executes the references previously set by setReferences function
    *
    * @param null
    * @return null
    */
    void commandRobot();

  private:

    // Basic variables
    ros::NodeHandle nh_rc;
    ros::Subscriber joint_state_sub;    // For getting hand joint states
    ros::Time prev_time;
    ros::Time curr_time;
    ros::Duration dt;                   // Used to integrate hand joint speed

    // A mutual exclusion lock for the variables of this class
    std::mutex robot_commander_mutex;

    // A data structure containing the names of the hand joints in order
    std::vector<std::string> joint_names_vec;

    // The topic names for hand commanding and arm commanding
    std::string hand_topic;
    std::string arm_topic;

    // The commanded values given by contactPreserver (divided)
    Eigen::VectorXd hand_ref;
    geometry_msgs::Twist palm_ref;

    // A sensor message containing the latest available joints of the hand
    sensor_msgs::JointState current_joints;

    // Publishers to hand and arm controllers
    ros::Publisher pub_hand;
    ros::Publisher pub_arm;

    // The variables for sending trajectories to the hand
    trajectory_msgs::JointTrajectoryPoint hand_point;
    

    /** GETJOINTSTATES
    * @brief Private callback function to get and write joint states of the hand
    *
    * @param null
    * @return null
    */
    void getJointStates(const sensor_msgs::JointStateConstPtr& msg);

  };

}


#endif // ROBOT_COMMANDER_H
