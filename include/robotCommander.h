#ifndef ROBOT_COMMANDER_H
#define ROBOT_COMMANDER_H

#include <Eigen/Dense>
#include <geometry_msgs/Twist.h>


/**
* @brief This class is called by the adaptive_grasping method to close the
* hand and move the kuka in order to execute the references generated by the
* contactPreserver according to the adaptive_grasping algorithm.
* @uses joint trajectory controller for the hand
* @uses twist controller for the kuka arm (palm)
*
*/

namespace adaptive_grasping {

  class robotCommander {

  public:

    /** CONSTRUCTOR
    * @brief Default constructor for robotCommander
    *
    * @param hand_topic_
    *   the topic for commanding the hand closure
    * @param arm_topic_
    *   the topic for commanding the arm
    * @return null
    */
    robotCommander(std::string hand_topic_, std::string arm_topic_);

    /** DESTRUCTOR
    * @brief Default destructor for robotCommander
    *
    * @param null
    * @return null
    */
    ~robotCommander();

    /** SETREFERENCES
    * @brief Public function to set the references of palm and hand joints
    *
    * @param joints_ref_
    *   the vector containing the hand joints' speeds
    * @param palm_ref_ (must be 6d)
    *   the vector containing the reference twist for the palm
    * @return null
    */
    void setReferences(Eigen::VectorXd joints_ref_, Eigen::VectorXd palm_ref_);

  private:

    // The topic names for hand commanding and arm commanding
    std::string hand_topic;
    std::string arm_topic;

    // The commanded values given by contactPreserver (divided)
    Eigen::VectorXd joints_ref;
    geometry_msgs::Twist palm_ref;

    // 



  };

}


#endif // ROBOT_COMMANDER_H
